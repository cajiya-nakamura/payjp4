<?php
/**
 * This file is part of payjp4
 *
 * Copyright(c) Akira Kurozumi <info@a-zumi.net>
 *
 *  https://a-zumi.net
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\payjp4\Tests\Form\Type\Admin;


use Eccube\Entity\Master\SaleType;
use Eccube\Form\Type\Admin\ProductClassType;
use Eccube\Tests\Form\Type\AbstractTypeTestCase;
use Symfony\Component\Form\FormInterface;

class ProductClassTypeTest extends AbstractTypeTestCase
{
    /**
     * @var FormInterface
     */
    protected $form;

    /**
     * @var array
     */
    protected $formData = [
        'price02' => 1000,
        'stock' => 100,
        'sale_limit' => 1
    ];

    /**
     * @var SaleType
     */
    protected $saleType;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->form = $this->formFactory
            ->createBuilder(ProductClassType::class, null, ['csrf_protection' => false])
            ->getForm();

        $this->saleType = $this->entityManager->getRepository(SaleType::class)
            ->findOneBy([
                'name' => trans('plugin.payjp.admin.sale_type.name')
            ]);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testIntervalフィールドが空のときはエラー()
    {
        $this->formData['sale_type'] = $this->saleType->getId();
        $this->formData['interval'] = '';
        $this->formData['billing_day'] = 1;

        $this->form->submit($this->formData);
        self::assertFalse($this->form->isValid());
    }

    public function testSaleLimitフィールドの値が空のときはエラー()
    {
        $this->formData['sale_type'] = $this->saleType->getId();
        $this->formData['interval'] = 'month';
        $this->formData['billing_day'] = 1;
        $this->formData['sale_limit'] = '';

        $this->form->submit($this->formData);
        self::assertFalse($this->form->isValid());
    }

    public function testSaleLimitフィールドの値が1以上のときはエラー()
    {
        $this->formData['sale_type'] = $this->saleType->getId();
        $this->formData['interval'] = 'month';
        $this->formData['billing_day'] = 1;
        $this->formData['sale_limit'] = 2;

        $this->form->submit($this->formData);
        self::assertFalse($this->form->isValid());
    }
}
