<?php
/**
 * This file is part of SocialLogin4
 *
 * Copyright(c) Akira Kurozumi <info@a-zumi.net>
 *
 *  https://a-zumi.net
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\payjp4\Tests\Service\PurcaseFlow\Processor;


use Eccube\Entity\Order;
use Eccube\Entity\Payment;
use Eccube\Service\PurchaseFlow\PurchaseContext;
use Eccube\Tests\EccubeTestCase;
use Plugin\payjp4\Entity\PaymentStatus;
use Plugin\payjp4\Service\Method\CreditCard;
use Plugin\payjp4\Service\Method\Subscription;
use Plugin\payjp4\Service\PurchaseFlow\Processor\PayjpTokenValidator;

class PayjpTokenValidatorTest extends EccubeTestCase
{
    /**
     * @var PayjpTokenValidator
     */
    protected $processor;

    /**
     * @var Order
     */
    protected $Order;

    /**
     * @var Payment
     */
    protected $CreditCard;

    /**
     * @var Payment
     */
    protected $Subscription;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->processor = new PayjpTokenValidator(
            $this->entityManager->getRepository(PaymentStatus::class),
            $this->entityManager->getRepository(Payment::class)
        );

        $this->Order = $this->createOrder($this->createCustomer());
        $this->CreditCard = $this->entityManager->getRepository(Payment::class)->findOneBy([
            'method_class' => CreditCard::class
        ]);
        $this->Subscription = $this->entityManager->getRepository(Payment::class)->findOneBy([
            'method_class' => Subscription::class
        ]);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testNewInstance()
    {
        self::assertInstanceOf(PayjpTokenValidator::class, $this->processor);
    }

    public function testValidate_CreditCard()
    {
        $this->Order->setPayment($this->CreditCard);
        $this->processor->execute($this->Order, new PurchaseContext());
        self::assertEquals(PaymentStatus::ENABLED, $this->Order->getPayJpPaymentStatus()->getId());
    }

    public function testValidate_Subscription()
    {
        $this->Order->setPayment($this->Subscription);
        $this->processor->execute($this->Order, new PurchaseContext());
        self::assertEquals(PaymentStatus::ENABLED, $this->Order->getPayJpPaymentStatus()->getId());
    }

    public function testValidate_Not_CreditCard_or_Subscription()
    {
        $Payment = new Payment();
        $Payment->setMethodClass("test");
        $this->Order->setPayment($Payment);
        $this->processor->execute($this->Order, new PurchaseContext());
        self::assertEquals(null, $this->Order->getPayJpPaymentStatus());
        self::assertEquals(null, $this->Order->getPayjpToken());
    }
}
